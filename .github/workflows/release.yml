name: 🚀 Release with Commit Messages

on:
  push:
    tags:
      - 'v*'

jobs:
  create-release:
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 📝 Generate release notes from PR commit messages
        id: generate-notes
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const version = process.env.GITHUB_REF.replace('refs/tags/v', '');

            // Get previous release tag for changelog link
            let previousTag = '1.0.0';
            try {
              const { data: releases } = await github.rest.repos.listReleases({
                owner: context.repo.owner,
                repo: context.repo.repo,
                per_page: 5
              });
              if (releases.length > 1) {
                previousTag = releases[1].tag_name;
              }
            } catch (error) {
              console.log('Using default previous tag:', previousTag);
            }

            // Get all commits between previousTag and current tag
            const compare = await github.rest.repos.compareCommits({
              owner: context.repo.owner,
              repo: context.repo.repo,
              base: previousTag,
              head: `v${version}`
            });

            const commitShas = compare.data.commits.map(c => c.sha);

            // Map to store PRs included in this release
            let prMap = new Map();

            // For each commit, find associated PR (if any)
            for (const sha of commitShas) {
              const { data: prs } = await github.rest.repos.listPullRequestsAssociatedWithCommit({
                owner: context.repo.owner,
                repo: context.repo.repo,
                commit_sha: sha
              });
              for (const pr of prs) {
                if (pr.merged_at && !prMap.has(pr.number)) {
                  prMap.set(pr.number, pr);
                }
              }
            }

            // Build release notes
            let releaseNotes = "## What's Changed\n\n";
            let prCount = 0;

            for (const [prNumber, pr] of prMap.entries()) {
              prCount++;
              releaseNotes += `* **${pr.title}** by @${pr.user.login} in [#${pr.number}](${pr.html_url})\n`;

              // Get ALL commits for this PR
              const { data: commits } = await github.rest.pulls.listCommits({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: pr.number
              });

              if (commits && commits.length > 0) {
                releaseNotes += "\n  **Commits:**\n";
                for (const commit of commits) {
                  const message = commit.commit.message.trim();
                  const shaShort = commit.sha.substring(0, 7);
                  const author = commit.commit.author.name;
                  releaseNotes += `  • ${shaShort}: ${message} (_${author}_)\n`;
                }
                releaseNotes += "\n";
              } else {
                releaseNotes += "  • No commit messages found\n\n";
              }
            }

            if (prCount === 0) {
              releaseNotes += "No merged pull requests found.\n\n";
            }

            // Add changelog link
            releaseNotes += `**Full Changelog**: https://github.com/${context.repo.owner}/${context.repo.repo}/compare/${previousTag}...v${version}\n`;

            // Set output for next steps
            core.setOutput("result", releaseNotes);

      - name: 🚀 Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          body: ${{ steps.generate-notes.outputs.result }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 📋 Display generated notes for verification
        run: |
          echo "=== RELEASE NOTES GENERATED ==="
          echo "${{ steps.generate-notes.outputs.result }}"
          echo "=== END ==="
